NFP configuration file
===============================================================================
The configuration file is used to initialize NFP instance at startup.

It is processed by nfp_initialize_param() or nfp_initialize_param_from_file()
to set the NFP initialization parameters (nfp_initialize_param_t).

nfp_initialize() uses this type of argument to initialize NFP.

nfp_initialize_param()
===============================================================================
This function initializes an nfp_initialize_param_t argument with the default
values and override them with the values read from the configuration file.

The configuration file name is taken from NFP_CONF_FILE environment variable, if
set. If the environment variable is not set, than $(sysconfdir)/nfp.conf,
normally /usr/local/etc/nfp.conf, is used.

If file is not found, the default values are returned.

nfp_initialize_param_from_file()
===============================================================================
Same as nfp_initialize_param() but it takes the configuration file name
as argument. If set to NULL, it has the same behaviour as
nfp_initialize_param().


NFP configuration file format
===============================================================================

Note: The file uses libconfig format. See
http://www.hyperrealm.com/libconfig/libconfig_manual.html#Configuration-File-Grammar

nfp_global_param: {
	enable: {
		dns = boolean
		dhcp = boolean
		channel = boolean
		ipsec = boolean
		vlan = boolean
		vxlan = boolean
		gre = boolean
		lo = boolean
		cli = boolean
		cls = boolean
		netlink = boolean
	}

	if_names = [ string, string, ... ]

	pktin_mode = "direct" | "sched" | "queue" | "disabled"
	pktout_mode = "direct" | "queue" | "tm" | "disabled"
	sched_sync = "parallel" | "atomic" | ordered"
	sched_group = "all | "worker" | "control"

	if_sp_mgmt = boolean

	ifnet: {
		if_mtu = integer

		if_sp_offset = integer
	}

	linux_core_id = integer

	control_core_mask = string (hex)

	worker_core_mask = string (hex)

	evt_rx_burst_size = integer
	pkt_tx_burst_size = integer

	pkt_pool: {
		nb_pkts = integer
		buffer_size = integer
	}

	subport: {
		num_max = integer
	}

	route: {
		mtrie: {
			routes = integer
			table8_nodes = integer
		}

		route4_nodes = integer

		route6_nodes = integer

		num_vrf = integer

		default_route_arp_spec = boolean

		add_route_on_arp = boolean
	}

	arp: {
		entries = integer
		hash_bits = integer
		entry_timeout = integer
		saved_pkt_timeout = integer
		check_interface = boolean
	}

	timer: {
		num_max = integer
	}

	chksum_offload: {
		ipv4_rx_ena = true
		udp_rx_ena = true
		tcp_rx_ena = true
		ipv4_tx_ena = true
		udp_tx_ena = true
		tcp_tx_ena = true
	}

	ipsec: {
		max_num_sp = integer
		max_num_sa = integer
		max_inbound_spi = integer
		inbound_op_mode = "sync" | "async" | "inline" | "disabled"
		outbound_op_mode = "sync" | "async" | "inline" | "disabled"
	}

	socket: {
		num_max = integer
		sd_offset = integer
	}

	epoll: {
		num_max = integer
		set_size = integer
	}

	in_mcast: {
		pcb_mcast_max = integer
		grp_membership_max = integer
		src_max = integer
		if_maddr_max = integer
	}

	tcp: {
		pcb_tcp_max = integer
		pcb_hashtbl_size = integer
		pcbport_hashtbl_size = integer
		syncache_hashtbl_size = integer
		sackhole_max = integer
		phd_max = integer
	}

	udp: {
		pcb_udp_max = integer
		pcb_hashtbl_size = integer
		pcbport_hashtbl_size = integer
		phd_max = integer
	}

	icmp: {
		pcb_icmp_max = integer
	}

	if_loopback = boolean

	loglevel = "disabled" | "error" | "warning" | "info" | "debug"

	debug: {
		flags = integer (hex)
		print_filename = string
		capture_ports = integer (hex)
		capture_filename = string
	}

	cli: {
		os_thread: {
			start_on_init = boolean
			port = integer
			addr = string
			core_id = integer
		}

		nfp_thread: {
			start_on_init = boolean
			port = integer
			addr = string
			core_id = integer
		}

		enable_shutdown_cmd = boolean
	}

	channel: {
		num_max = integer
	}

	dhcp: {
		num_max = integer
	}

	dns: {
		dflt_ns = (
					{
						addr = string
						domain = string
					},
					{
						addr = string
						domain = string
					},
					......
		)

		hosts = (
				{
					addr = string
					cname = string
					alias = [string, string, ...]
				},
				{
					addr = string
					cname = string
					alias = [string, string, ...]
				},
				......
		)

		query_timeout = integer
		query_retry_max = integer
		resolver_max = integer
		cache_max = integer
	}
}

Description:
enable.dns: Enable/disable dns functionality
	Default value is enable (true).

enable.dhcp: Enable/disable dhcp functionality
	Default value is enable (true).

enable.channel: Enable/disable packet channel functionality
	Default value is enable (true).

enable.ipsec: Enable/disable ipsec functionality
	Default value is enable (true).

enable.vlan: Enable/disable vlan functionality
	Default value is enable (true).

enable.vxlan: Enable/disable vxlan functionality
	Default value is enable (true).

enable.gre: Enable/disable gre functionality
	Default value is enable (true).

enable.lo: Enable/disable loopback functionality
	Default value is enable (true).

enable.cli: Enable/disable CLI functionality
	Default value is enable (true).

enable.cls: Enable/disable odp classifier functionality
	Default value is enable (true).

enable.netlink: Enable/disable netlink functionality.
	This option has effect if slow path support is enabled.
	The default value is enable (true).

if_names: Names of the interfaces to be initialized.
	Default value: empty list
	Example: ["0"]

pktin_mode: Packet input mode of the interfaces initialized by NFP.
	Default value is ODP_PKTIN_MODE_SCHED.

pktout_mode: Packet output mode of the interfaces initialized by NFP
	Default value is ODP_PKTOUT_MODE_DIRECT.

sched_sync: Scheduler synchronization method of the pktin queues of the
	interfaces initialized by NFP in the scheduled mode.
	Ignored when pktin_mode is not ODP_PKTIN_MODE_SCHED.
	Default value is ODP_SCHED_SYNC_ATOMIC.

sched_group: ODP event scheduling group for all scheduled event queues
	(pktio queues, timer queues and other queues) created in
	NFP initialization. The default value is ODP_SCHED_GROUP_ALL.

if_sp_mgmt: Enable/disable slow path interface management of the interfaces
created during NFP initialization. That is create/configure/destroy of the SP
interfaces.
	Default value is enable (1).

ifnet.if_mtu: MTU to set on interfaces. The actual value is adjusted based on
NIC capabilities and packet pool settings.
	Default value is NFP_MTU_SIZE.

ifnet.if_sp_offset: Slow path interface name offset. Slow path interface name
for a network interface is composed from a fix part "sp" and a variable part
formed from interface name offset + interface index e.g. "sp0".
	Default value is 0.

linux_core_id: CPU core to which internal NFP control threads are pinned.
	Default value is 0.

control_core_mask: CPU cores available for control threads.
	Default value is zeroed mask (default CPU mapping is used).
	Note: The value is applied only when NFP has ownership on ODP instance.

worker_core_mask: CPU cores available for worker threads.
	Default value is zeroed mask (default CPU mapping is used).
	Note: The value is applied only when NFP has ownership on ODP instance.

evt_rx_burst_size: Maximum number of events received at once with the default
	event dispatched (default_event_dispatcher() or
	default_event_dispatcher_multi()).
	Default value is NFP_EVT_RX_BURST_SIZE.

pkt_tx_burst_size: Number of packets sent at once (>= 1).
	Default value is NFP_PKT_TX_BURST_SIZE.

pkt_pool.nb_pkts: Packet pool size.
	Default value is SHM_PKT_POOL_NB_PKTS

pkt_pool.buffer_size: Packet pool buffer size.
	Default value is SHM_PKT_POOL_BUFFER_SIZE

subport.num_max: Maximum number of pseudo-interfaces used to represent
	VLAN, VXLAN, GRE and loopback interfaces.
	Default value is NFP_SUBPORT_NUM_MAX.

route.mtrie.routes: Number of IPv4 routes (MTRIE).
	Default value is NFP_ROUTES.

route.mtrie.table8_nodes: Number of 8 bit mtrie nodes.
	Default value is NFP_MTRIE_TABLE8_NODES.

route.route4_nodes: Number of tree nodes used to store IPv4 routes (RADIX).
	Default value is NFP_ROUTE4_NODES.

route.route6_nodes: Number of tree nodes used to store IPv6 routes.
	Default value is NFP_ROUTE6_NODES.

route.num_vrf: Maximum number of VRFs.
	Default value is NFP_NUM_VRF.
	VRF IDs used in interfaces and routes must be less than
	this value.

route.default_route_arp_spec: Speculate the IPv4 default route based on arp messages,
	when a default route is not set.
	Default value is false (no speculation).

route.add_route_on_arp: Add routes on received arp requests/replies.
	Default value is true (add).

arp.entries: Maximum number of ARP entries.
	Default value is NFP_ARP_ENTRIES.

arp.hash_bits: ARP hash bits.
	Default value is NFP_ARP_HASH_BITS.

arp.entry_timeout: Entry timeout in seconds.
	Default value is NFP_ARP_ENTRY_TIMEOUT.

arp.saved_pkt_timeout: Timeout (in seconds) for a packet waiting for ARP
	to complete. Default is NFP_ARP_SAVED_PKT_TIMEOUT.

arp.check_interface: Reply to an ARP request only if the target address of the
	request is an address of the receiving interface.
	Ignore the request otherwise.
	If not set, reply to an ARP request for any local IP
	address regardless of the receiving interface.

	See net.ipv4.conf.all.arp_ignore sysctl in Linux.

	Default value is 0.

timer.num_max: Maximum number of timers.
	Default value is NFP_TIMER_NUM_MAX.

chksum_offload.ipv4_rx_ena: Enable IPv4 header checksum validation offload.
	0: Disable offloading.
	1: Enable offloading.
	Default value is NFP_CHKSUM_OFFLOAD_IPV4_RX.

chksum_offload.udp_rx_ena: Enable UDP checksum validation offload
	0: Disable offloading.
	1: Enable offloading.
	Default value is NFP_CHKSUM_OFFLOAD_UDP_RX.

chksum_offload.tcp_rx_ena: Enable TCP checksum validation offload
	0: Disable offloading.
	1: Enable offloading.
	Default value is NFP_CHKSUM_OFFLOAD_TCP_RX.

chksum_offload.ipv4_tx_ena: Enable IPv4 header checksum insertion offload
	0: Disable offloading.
	1: Enable offloading.
	Default value is NFP_CHKSUM_OFFLOAD_IPV4_TX.

chksum_offload.udp_tx_ena: Enable UDP checksum insertion offload
	0: Disable offloading.
	1: Enable offloading.
	Default value is NFP_CHKSUM_OFFLOAD_UDP_TX.

chksum_offload.tcp_tx_ena: Enable TCP checksum insertion offload
	0: Disable offloading.
	1: Enable offloading.
	Default value is NFP_CHKSUM_OFFLOAD_TCP_TX.

ipsec.max_num_sp: Maximum number of security policies that can exist at a time.
	Default value is NFP_IPSEC_MAX_NUM_SP.

ipsec.max_num_sa: Maximum number of SAs that can exist at a time.
	Default value is NFP_IPSEC_MAX_NUM_SA.

ipsec.max_inbound_spi: Maximum inbound SPI value that may be used.
	Default value is NFP_IPSEC_MAX_INBOUND_SPI.

ipsec.inbound_op_mode: Inbound operation mode.
	Default value is ODP_IPSEC_OP_MODE_SYNC.

ipsec.outbound_op_mode: Outbound operation mode.
	Default value is ODP_IPSEC_OP_MODE_SYNC.

socket.num_max: Maximum number of sockets that can exist at a time.
	Default value is NFP_NUM_SOCKETS_MAX.

socket.sd_offset: Socket descriptor offset.
	Socket descriptors are returned in interval [sd_offset,
	sd_offset + num_max -1]
	Default value is NFP_SOCK_NUM_OFFSET.

epoll.num_max: Maximum number of epoll instances.
	Default value is NFP_EPOLL_NUM_MAX.

epoll.set_size: Maximum number of socket descriptors that can be
	monitored by an epoll instance.
	Default value is NFP_EPOLL_SET_SIZE.

in_mcast.pcb_mcast_max: Maximum number of multicast aware PCBs.
	Default value is NFP_NUM_PCB_MCAST_MAX.

in_mcast.grp_membership_max: Maximum number of multicast group memberships
	for all PCBs.
	Default value is NFP_MCAST_MEMBERSHIP_MAX.

in_mcast.src_max: Maximum number of multicast sources for all PCBs.
	Default value is NFP_MCAST_SOURCE_MAX.

in_mcast.if_maddr_max: Maximum number of multicast addresses assigned
	to all interfaces.
	Default value is NFP_MCAST_IF_MADDR_MAX.

tcp.pcb_tcp_max: Maximum number of TCP PCBs.
	Default value is NFP_NUM_PCB_TCP_MAX.

tcp.pcb_hashtbl_size: Size of TCP PCB hash.
	Must be a power of 2.
	Default value is computed based on tcp.pcb_tcp_max value.

tcp.pcbport_hashtbl_size: Size of pcbport hash.
	Must be a power of 2.
	Default value is computed based on tcp.pcb_tcp_max value.

tcp.syncache_hashtbl_size: Size of syncache hash.
	Must be a power of 2.
	Default value is computed based on tcp.pcb_tcp_max value.

tcp.sackhole_max: Maximum number of SACK holes.
	Default value is 4 * tcp.pcb_tcp_max

tcp.phd_max: Maximum number of PHDs (local ports)
	Default value is tcp.pcb_tcp_max.

udp.pcb_udp_max: Maximum number of UDP PCBs.
	Default value is NFP_NUM_PCB_UDP_MAX.

udp.pcb_hashtbl_size: Size of pcb hash.
	Must be a power of 2.
	Default value is computed based on udp.pcb_udp_max

udp.pcbport_hashtbl_size: Size of pcbport hash.
	Must be a power of 2.
	Default value is computed based on udp.pcb_udp_max

udp.phd_max: Maximum number of PHDs (local ports)
	Default value is udp.pcb_udp_max.

icmp.pcb_icmp_max: Maximum number of ICMP PCBs.
	Default value is NFP_NUM_PCB_ICMP_MAX.

if_loopback: Create the default loopback interface lo0, 127.0.0.1/8.
	Default value is 0 (do not create)

loglevel: Log level
	Default value is NFP_LOG_DEBUG if NFP_DEBUG is define.
	Else is NFP_LOG_INFO.

debug.flags: Bitmask options for printing traffic on file (and console) in
	text format and capturing traffic on file in pcap format.
	bit 0: print packets from NIC to FP.
		Use NFP_DEBUG_PRINT_RECV_NIC to set this flag.
	bit 1: print packets from FP to NIC.
		Use NFP_DEBUG_PRINT_SEND_NIC to set this flag.
	bit 2: print packets from FP to SP.
		Use NFP_DEBUG_PRINT_RECV_KNI to set this flag.
	bit 3: print packets from SP to NIC.
		Use NFP_DEBUG_PRINT_SEND_KNI to set this flag.
	bit 4: print packets to console.
		Use NFP_DEBUG_PRINT_CONSOLE to set this flag.
	bit 6: capture packets to pcap file.
		Use NFP_DEBUG_CAPTURE to set this flag.
	Default value is 0.
	Example: 0x2f

debug.print_filename: Name of the file where the packets are printed (text format)
	Default value is empty - value of DEFAULT_DEBUG_TXT_FILE_NAME is used.
	Example: "/tmp/pkt.txt"

debug.capture_ports: Bitmask of the ports for which the packets are captures
	Default value is 0 if bit 6 of debug.flags has is not set or 0x1 otherwise.
	Example: 0x1

debug.capture_filename: Name of the file where the packets are captured (pcap format)
	Default value is empty - value of DEFAULT_DEBUG_PCAP_FILE_NAME is used.
	Example: "/tmp/pkt.pcap"

cli.os_thread.start_on_init: Start the thread on NFP initialization (OS thread).
	Default value is 0.

cli.os_thread.port: Port where CLI connections are waited (OS thread).
	Default value is NFP_CLI_PORT_DFLT.

cli.os_thread.addr: Address where CLI connections are waited (OS thread).
	Default value is NFP_CLI_ADDR_DFLT.

cli.os_thread.core_id: CPU core where CLI thread is pinned (OS thread).
	Default value is the value of 'linux_core_id'.

cli.nfp_thread.start_on_init: See cli.os_thread.start_on_init but applied for
	the CLI thread using NFP sockets API.

cli.nfp_thread.port: See cli.os_thread.port but applied for the CLI thread
	using NFP sockets API.

cli.nfp_thread.addr: See cli.os_thread.addr but applied for the CLI thread
	using NFP sockets API.

cli.nfp_thread.core_id: See cli.os_thread.core_id but applied for the CLI thread
	using NFP sockets API.

cli.enable_shutdown_cmd: Enable execution of shutdown command. If set to true,
	the command will stop the execution of NFP internal threads and also
	user created NFP control and worker threads or processes (if were
	constructed to inspect the processing state of NFP (see
	nfp_get_processing_state()). If set to false, the shutdown cli command will
	report an error and operation will not take place.
	Default value is true.

channel.num_max: Maximum number of channels.
	Default value is NFP_CHANNEL_NUM_MAX.

dhcp.num_max: Maximum number of DHCP instances.
	Default value is NFP_DHCP_NUM_MAX.

dns.dflt_ns: List of default (safety belt) NS servers
	Default value is empty list

dns.dflt_ns[i].addr: NS server address
	Default value is empty string.

dns.dflt_ns[i].domain: NS server domain
	Default value is empty string.

dns.hosts: Domain static lookup table
	Default value is a list containing 'localhost' name.

dns.hosts[i].addr: Host address (IPv4 or IPv6)
	Defautl value is empty string.

dns.hosts[i].cname: Canonical host name
	Defautl value is empty string.

dns.hosts[i].alias: Alias host names
	Defautl value is empty string.

dns.query_timeout: Maximum time (seconds) to wait for a query response.
	Default value is NFP_DNS_QUERY_TIMEOUT.

dns.query_retry_max: Maximum number of query retries.
	Default value is NFP_DNS_QUERY_RETRY_MAX.

dns.resolver_max: Maximum number of resolver concurent instances.
	Default value is NFP_DNS_RESOVER_MAX.

dns.cache_max: Maximum number of cache elements.
	Default value is NFP_DNS_CACHE_MAX.
