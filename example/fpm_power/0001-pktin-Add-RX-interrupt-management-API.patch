From 7118b73cf1c4a3a13927a0c4f9583d6094f1860a Mon Sep 17 00:00:00 2001
From: Bogdan Pricope <bogdan.pricope@netinosoft.org>
Date: Thu, 28 Sep 2023 00:22:44 +0200
Subject: [PATCH] pktin: Add RX interrupt management API

API targets power saving by sleeping workers when there is no
packet coming for a long time.
Worker is awaken through the use of RX interrupts.

Signed-off-by: Bogdan Pricope <bogdan.pricope@netinosoft.org>
---
 include/odp/api/spec/packet_io.h              | 40 ++++++++++++
 include/odp/api/spec/packet_io_types.h        |  2 +
 .../include/odp_packet_io_internal.h          |  5 ++
 platform/linux-dpdk/odp_packet_dpdk.c         |  5 +-
 .../include/odp_packet_io_internal.h          |  5 ++
 platform/linux-generic/odp_packet_io.c        | 63 +++++++++++++++++++
 platform/linux-generic/pktio/dpdk.c           | 51 ++++++++++++++-
 platform/linux-generic/pktio/ipc.c            |  5 +-
 platform/linux-generic/pktio/loop.c           |  3 +
 platform/linux-generic/pktio/null.c           |  5 +-
 platform/linux-generic/pktio/pcap.c           |  5 +-
 platform/linux-generic/pktio/socket.c         |  3 +
 platform/linux-generic/pktio/socket_mmap.c    |  3 +
 platform/linux-generic/pktio/socket_xdp.c     |  5 +-
 platform/linux-generic/pktio/tap.c            |  5 +-
 15 files changed, 198 insertions(+), 7 deletions(-)

diff --git a/include/odp/api/spec/packet_io.h b/include/odp/api/spec/packet_io.h
index 602093764..a547e45ac 100644
--- a/include/odp/api/spec/packet_io.h
+++ b/include/odp/api/spec/packet_io.h
@@ -892,6 +892,46 @@ odp_time_t odp_pktio_time(odp_pktio_t pktio, odp_time_t *ts_global);
  */
 int odp_pktout_ts_read(odp_pktio_t pktio, odp_time_t *ts);
 
+/**
+ * Enable or disable RX interrupts to be triggered when packets arive
+ *
+ * @param      queue      Packet input queue handle for receiving packets
+ * @param      enable     1 to enable, 0 to disable.
+ *
+ * @retval 0 on success
+ * @retval <0 on failure
+ */
+int odp_pktin_intr_set(odp_pktin_queue_t queue, odp_bool_t enable);
+
+/**
+ * Register packet input queue to the mechanism (epoll) used for waiting RX
+ * interrupts.
+ * The mechanism has thread scope.
+ *
+ * @param      queue      Packet input queue handle for receiving packets
+ *
+ * @retval 0 on success
+ * @retval <0 on failure
+ */
+int odp_pktin_intr_wait_register(odp_pktin_queue_t queue);
+
+/**
+ * Wait for RX interrupts
+ *
+ * @param      pktio_type Indicates pktio specific implementation used.
+ *                        e.g. "dpdk"
+ * @param      maxnum     Up to maxnum interrupts are waited.
+ *                        Must be greater than zero.
+ * @param      timeout_ms Time to wait for interrupts (ms).
+ *                        Specifying a timeout of -1 causes a block
+ *                        indefinitely. Specifying a timeout equal to zero
+ *                        cause to return immediately.
+ *
+ * @retval number of interrupts on success
+ * @retval <0 on failure
+ */
+int odp_pktin_intr_wait(const char *pktio_type, int maxnum, int timeout_ms);
+
 /**
  * @}
  */
diff --git a/include/odp/api/spec/packet_io_types.h b/include/odp/api/spec/packet_io_types.h
index a46668c30..691e65031 100644
--- a/include/odp/api/spec/packet_io_types.h
+++ b/include/odp/api/spec/packet_io_types.h
@@ -419,6 +419,8 @@ typedef union odp_pktin_config_opt_t {
 		/** Drop packets with a SCTP error on packet input */
 		uint64_t drop_sctp_err : 1;
 
+		/** Enable/disable rx interrupt mode */
+		uint64_t intr_mode : 1;
 	} bit;
 
 	/** All bits of the bit field structure
diff --git a/platform/linux-dpdk/include/odp_packet_io_internal.h b/platform/linux-dpdk/include/odp_packet_io_internal.h
index 2efa52b67..5e94ee9b3 100644
--- a/platform/linux-dpdk/include/odp_packet_io_internal.h
+++ b/platform/linux-dpdk/include/odp_packet_io_internal.h
@@ -221,6 +221,11 @@ typedef struct pktio_if_ops {
 				   const odp_pktin_queue_param_t *param);
 	int (*output_queues_config)(pktio_entry_t *pktio_entry,
 				    const odp_pktout_queue_param_t *p);
+
+	/* Interrupt management */
+	int (*pktin_intr_set)(pktio_entry_t *pktio_entry, int index, odp_bool_t enable);
+	int (*pktin_intr_wait_register)(pktio_entry_t *pktio_entry, int index);
+	int (*pktin_intr_wait)(int maxnum, int timeout);
 } pktio_if_ops_t;
 
 typedef struct {
diff --git a/platform/linux-dpdk/odp_packet_dpdk.c b/platform/linux-dpdk/odp_packet_dpdk.c
index 238f733cd..378723b5b 100644
--- a/platform/linux-dpdk/odp_packet_dpdk.c
+++ b/platform/linux-dpdk/odp_packet_dpdk.c
@@ -1627,5 +1627,8 @@ const pktio_if_ops_t _odp_dpdk_pktio_ops = {
 	.input_queues_config = dpdk_input_queues_config,
 	.output_queues_config = dpdk_output_queues_config,
 	.recv = recv_pkt_dpdk,
-	.send = send_pkt_dpdk
+	.send = send_pkt_dpdk,
+	.pktin_intr_set = NULL,
+	.pktin_intr_wait_register = NULL,
+	.pktin_intr_wait = NULL,
 };
diff --git a/platform/linux-generic/include/odp_packet_io_internal.h b/platform/linux-generic/include/odp_packet_io_internal.h
index 9caf3c2e9..8e144a8b4 100644
--- a/platform/linux-generic/include/odp_packet_io_internal.h
+++ b/platform/linux-generic/include/odp_packet_io_internal.h
@@ -237,6 +237,11 @@ typedef struct pktio_if_ops {
 				   const odp_pktin_queue_param_t *param);
 	int (*output_queues_config)(pktio_entry_t *pktio_entry,
 				    const odp_pktout_queue_param_t *p);
+
+	/* Interrupt management */
+	int (*pktin_intr_set)(pktio_entry_t *pktio_entry, int index, odp_bool_t enable);
+	int (*pktin_intr_wait_register)(pktio_entry_t *pktio_entry, int index);
+	int (*pktin_intr_wait)(int maxnum, int timeout);
 } pktio_if_ops_t;
 
 typedef struct {
diff --git a/platform/linux-generic/odp_packet_io.c b/platform/linux-generic/odp_packet_io.c
index 78cd93885..a870b9c3b 100644
--- a/platform/linux-generic/odp_packet_io.c
+++ b/platform/linux-generic/odp_packet_io.c
@@ -3550,3 +3550,66 @@ odp_proto_stats_print(odp_proto_stats_t stat)
 {
 	(void)stat;
 }
+
+int odp_pktin_intr_set(odp_pktin_queue_t queue, odp_bool_t enable)
+{
+	pktio_entry_t *entry;
+	odp_pktio_t pktio = queue.pktio;
+
+	entry = get_pktio_entry(pktio);
+	if (entry == NULL) {
+		_ODP_DBG("pktio entry %" PRIuPTR " does not exist\n", (uintptr_t)pktio);
+		return -1;
+	}
+
+	if (odp_unlikely(entry->state != PKTIO_STATE_STARTED))
+		return 0;
+
+	if (entry->ops->pktin_intr_set == NULL)
+		return -1;
+
+	return entry->ops->pktin_intr_set(entry, queue.index, enable);
+}
+
+int odp_pktin_intr_wait_register(odp_pktin_queue_t queue)
+{
+	pktio_entry_t *entry;
+	odp_pktio_t pktio = queue.pktio;
+
+	entry = get_pktio_entry(pktio);
+	if (entry == NULL) {
+		_ODP_DBG("pktio entry %" PRIuPTR " does not exist\n", (uintptr_t)pktio);
+		return -1;
+	}
+
+	if (odp_unlikely(entry->state != PKTIO_STATE_STARTED))
+		return 0;
+
+	if (entry->ops->pktin_intr_wait_register == NULL)
+		return -1;
+
+	return entry->ops->pktin_intr_wait_register(entry, queue.index);
+}
+
+int odp_pktin_intr_wait(const char *pktio_type, int maxnum, int timeout_ms)
+{
+	int pktio_if;
+
+	if (!strlen(pktio_type))
+		return -1;
+
+	if (maxnum <= 0)
+		return -1;
+
+	for (pktio_if = 0; _odp_pktio_if_ops[pktio_if]; ++pktio_if) {
+		/* Only use explicitly defined pktio type */
+		if (!_odp_pktio_if_ops[pktio_if]->pktin_intr_wait ||
+		    strcmp(_odp_pktio_if_ops[pktio_if]->name, pktio_type))
+			continue;
+
+		return _odp_pktio_if_ops[pktio_if]->pktin_intr_wait(maxnum, timeout_ms);
+	}
+
+	return -1;
+}
+
diff --git a/platform/linux-generic/pktio/dpdk.c b/platform/linux-generic/pktio/dpdk.c
index 67779e073..2e6ab6c4a 100644
--- a/platform/linux-generic/pktio/dpdk.c
+++ b/platform/linux-generic/pktio/dpdk.c
@@ -1281,6 +1281,9 @@ static int dpdk_setup_eth_dev(pktio_entry_t *pktio_entry)
 	if (tx_offloads)
 		pktio_entry->enabled.chksum_insert = 1;
 
+	if (pktio_entry->config.pktin.bit.intr_mode)
+		eth_conf.intr_conf.rxq = 1;
+
 	ret = rte_eth_dev_configure(pkt_dpdk->port_id,
 				    pktio_entry->num_in_queue,
 				    pktio_entry->num_out_queue, &eth_conf);
@@ -1711,6 +1714,7 @@ static int dpdk_init_capability(pktio_entry_t *pktio_entry,
 	odp_pktio_config_init(&capa->config);
 	capa->config.pktin.bit.ts_all = 1;
 	capa->config.pktin.bit.ts_ptp = 1;
+	capa->config.pktin.bit.intr_mode = 1;
 
 	capa->config.pktin.bit.ipv4_chksum = ptype_l3_ipv4 &&
 		(dev_info->rx_offload_capa & RTE_ETH_RX_OFFLOAD_IPV4_CKSUM) ? 1 : 0;
@@ -2457,6 +2461,48 @@ static int dpdk_pktout_stats(pktio_entry_t *pktio_entry, uint32_t index,
 	return 0;
 }
 
+static int dpdk_pktin_intr_set(pktio_entry_t *pktio_entry, int index, odp_bool_t enable)
+{
+	uint16_t port_id = pkt_priv(pktio_entry)->port_id;
+
+	odp_ticketlock_lock(&pktio_entry->rxl);
+
+	if (enable)
+		rte_eth_dev_rx_intr_enable(port_id, index);
+	else
+		rte_eth_dev_rx_intr_disable(port_id, index);
+
+	odp_ticketlock_unlock(&pktio_entry->rxl);
+
+	return 0;
+}
+
+static int dpdk_pktin_intr_wait_register(pktio_entry_t *pktio_entry, int index)
+{
+	int ret;
+	uint32_t data;
+
+	data = pkt_priv(pktio_entry)->port_id << CHAR_BIT | index;
+	ret = rte_eth_dev_rx_intr_ctl_q(pkt_priv(pktio_entry)->port_id,
+					index,
+					RTE_EPOLL_PER_THREAD,
+					RTE_INTR_EVENT_ADD,
+					(void *)((uintptr_t)data));
+	if (odp_unlikely(ret)) {
+		_ODP_ERR("Failed to set DPDK RX interrupt control per queue: %d\n", ret);
+		return -1;
+	}
+
+	return 0;
+}
+
+static int dpdk_pktin_intr_wait(int maxnum, int timeout)
+{
+	struct rte_epoll_event event[maxnum];
+
+	return rte_epoll_wait(RTE_EPOLL_PER_THREAD, event, maxnum, timeout);
+}
+
 const pktio_if_ops_t _odp_dpdk_pktio_ops = {
 	.name = "dpdk",
 	.init_global = dpdk_pktio_init_global,
@@ -2489,7 +2535,10 @@ const pktio_if_ops_t _odp_dpdk_pktio_ops = {
 	.pktio_time = NULL,
 	.config = NULL,
 	.input_queues_config = dpdk_input_queues_config,
-	.output_queues_config = dpdk_output_queues_config
+	.output_queues_config = dpdk_output_queues_config,
+	.pktin_intr_set = dpdk_pktin_intr_set,
+	.pktin_intr_wait_register = dpdk_pktin_intr_wait_register,
+	.pktin_intr_wait = dpdk_pktin_intr_wait,
 };
 
 static odp_bool_t is_mem_src_active(void)
diff --git a/platform/linux-generic/pktio/ipc.c b/platform/linux-generic/pktio/ipc.c
index 58b949402..d0856b2b0 100644
--- a/platform/linux-generic/pktio/ipc.c
+++ b/platform/linux-generic/pktio/ipc.c
@@ -973,5 +973,8 @@ const pktio_if_ops_t _odp_ipc_pktio_ops = {
 	.pktio_ts_res = NULL,
 	.pktio_ts_from_ns = NULL,
 	.pktio_time = NULL,
-	.config = NULL
+	.config = NULL,
+	.pktin_intr_set = NULL,
+	.pktin_intr_wait_register = NULL,
+	.pktin_intr_wait = NULL,
 };
diff --git a/platform/linux-generic/pktio/loop.c b/platform/linux-generic/pktio/loop.c
index f9c72db25..6ddccd752 100644
--- a/platform/linux-generic/pktio/loop.c
+++ b/platform/linux-generic/pktio/loop.c
@@ -792,4 +792,7 @@ const pktio_if_ops_t _odp_loopback_pktio_ops = {
 	.config = NULL,
 	.input_queues_config = loopback_pktin_queue_config,
 	.output_queues_config = loopback_pktout_queue_config,
+	.pktin_intr_set = NULL,
+	.pktin_intr_wait_register = NULL,
+	.pktin_intr_wait = NULL,
 };
diff --git a/platform/linux-generic/pktio/null.c b/platform/linux-generic/pktio/null.c
index b067a68ec..b829fd231 100644
--- a/platform/linux-generic/pktio/null.c
+++ b/platform/linux-generic/pktio/null.c
@@ -208,5 +208,8 @@ const pktio_if_ops_t _odp_null_pktio_ops = {
 	.input_queues_config = null_inqueues_config,
 	.output_queues_config = null_outqueues_config,
 	.link_status = null_link_status,
-	.link_info = null_link_info
+	.link_info = null_link_info,
+	.pktin_intr_set = NULL,
+	.pktin_intr_wait_register = NULL,
+	.pktin_intr_wait = NULL,
 };
diff --git a/platform/linux-generic/pktio/pcap.c b/platform/linux-generic/pktio/pcap.c
index 20b6ec179..57a0d8234 100644
--- a/platform/linux-generic/pktio/pcap.c
+++ b/platform/linux-generic/pktio/pcap.c
@@ -574,5 +574,8 @@ const pktio_if_ops_t _odp_pcap_pktio_ops = {
 	.input_queues_config = NULL,
 	.output_queues_config = NULL,
 	.link_status = pcapif_link_status,
-	.link_info = pcapif_link_info
+	.link_info = pcapif_link_info,
+	.pktin_intr_set = NULL,
+	.pktin_intr_wait_register = NULL,
+	.pktin_intr_wait = NULL,
 };
diff --git a/platform/linux-generic/pktio/socket.c b/platform/linux-generic/pktio/socket.c
index 371831961..47d4d5403 100644
--- a/platform/linux-generic/pktio/socket.c
+++ b/platform/linux-generic/pktio/socket.c
@@ -663,4 +663,7 @@ const pktio_if_ops_t _odp_sock_mmsg_pktio_ops = {
 	.config = NULL,
 	.input_queues_config = NULL,
 	.output_queues_config = NULL,
+	.pktin_intr_set = NULL,
+	.pktin_intr_wait_register = NULL,
+	.pktin_intr_wait = NULL,
 };
diff --git a/platform/linux-generic/pktio/socket_mmap.c b/platform/linux-generic/pktio/socket_mmap.c
index 0c04acd03..6ff782d19 100644
--- a/platform/linux-generic/pktio/socket_mmap.c
+++ b/platform/linux-generic/pktio/socket_mmap.c
@@ -970,4 +970,7 @@ const pktio_if_ops_t _odp_sock_mmap_pktio_ops = {
 	.config = NULL,
 	.input_queues_config = NULL,
 	.output_queues_config = NULL,
+	.pktin_intr_set = NULL,
+	.pktin_intr_wait_register = NULL,
+	.pktin_intr_wait = NULL,
 };
diff --git a/platform/linux-generic/pktio/socket_xdp.c b/platform/linux-generic/pktio/socket_xdp.c
index be79ca267..917e6a049 100644
--- a/platform/linux-generic/pktio/socket_xdp.c
+++ b/platform/linux-generic/pktio/socket_xdp.c
@@ -1007,7 +1007,10 @@ const pktio_if_ops_t _odp_sock_xdp_pktio_ops = {
 	.capability = sock_xdp_capability,
 	.config = NULL,
 	.input_queues_config = sock_xdp_input_queues_config,
-	.output_queues_config = sock_xdp_output_queues_config
+	.output_queues_config = sock_xdp_output_queues_config,
+	.pktin_intr_set = NULL,
+	.pktin_intr_wait_register = NULL,
+	.pktin_intr_wait = NULL,
 };
 
 static odp_bool_t sock_xdp_is_mem_src_active(void)
diff --git a/platform/linux-generic/pktio/tap.c b/platform/linux-generic/pktio/tap.c
index 5f5b081c5..7af8c2176 100644
--- a/platform/linux-generic/pktio/tap.c
+++ b/platform/linux-generic/pktio/tap.c
@@ -550,5 +550,8 @@ const pktio_if_ops_t _odp_tap_pktio_ops = {
 	.pktio_ts_res = NULL,
 	.pktio_ts_from_ns = NULL,
 	.pktio_time = NULL,
-	.config = NULL
+	.config = NULL,
+	.pktin_intr_set = NULL,
+	.pktin_intr_wait_register = NULL,
+	.pktin_intr_wait = NULL,
 };
-- 
2.34.1

